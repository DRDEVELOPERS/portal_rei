generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Combo {
  id                 Int             @id @default(autoincrement())
  title              String
  description        String?
  imageUrl           String
  originalPrice      Int
  discountedPrice    Int
  discountPercentage Int
  createdAt          DateTime?       @default(now()) @db.Timestamptz(6)
  products           ComboProducts[]
  Review             Review[]

  @@map("combos")
}

model ComboProducts {
  comboId   Int      @map("combo_id")
  productId Int      @map("product_id")
  combo     Combo    @relation(fields: [comboId], references: [id])
  product   Products @relation(fields: [productId], references: [id])

  @@id([comboId, productId])
  @@map("combo_products")
}

model Addresses {
  id         Int       @id @default(autoincrement())
  user_id    String    @unique @db.Uuid
  name       String
  address    String
  zipcode    String
  city       String
  country    String
  created_at DateTime? @default(now()) @db.Timestamptz(6)

  @@map("addresses")
}

model Orders {
  id         Int         @id @default(autoincrement())
  user_id    String      @db.Uuid
  stripe_id  String
  name       String
  address    String
  zipcode    String
  city       String
  country    String
  total      Int
  created_at DateTime?   @default(now()) @db.Timestamptz(6)
  orderItem  OrderItem[]

  @@map("orders")
}

model OrderItem {
  id         Int       @id @default(autoincrement())
  order_id   Int
  product_id Int
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  order      Orders    @relation(fields: [order_id], references: [id])
  product    Products  @relation(fields: [product_id], references: [id])

  @@map("order_items")
}

model Products {
  id          Int             @id @default(autoincrement())
  title       String
  description String
  url         String
  price       Int
  category    String?
  specs       Json?
  relatedIds  String?
  rating      Float?
  created_at  DateTime?       @default(now()) @db.Timestamptz(6)
  combos      ComboProducts[]
  orderItem   OrderItem[]
  reviews     Review[]

  @@map("products")
}

model Review {
  id        Int       @id @default(autoincrement())
  productId Int?      @map("product_id") // Make optional
  comboId   Int?      @map("combo_id") // Add combo reference
  userId    String    @map("user_id") @db.Uuid
  rating    Int
  comment   String?
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  product   Products? @relation(fields: [productId], references: [id])
  combo     Combo?    @relation(fields: [comboId], references: [id]) // Add this

  @@map("reviews")
}
